/* package aleiiioa.shaders;

import h3d.mat.Texture;

class BeetleShader extends hxsl.Shader {
	static var SRC = {
		@:import h3d.shader.Base2d;
		@param var texture:Sampler2D;
		@param var speed:Float;
		@param var frequency:Float;
		@param var amplitude:Float;
		@param var NUM_OCTAVES:Int;
		
		function random(_st:Vec2):Float {
			return fract(sin(dot(_st.xy,vec2(12.9898,78.233)))*43758.5453123);
		}

		function fbm(_st:Vec2):Float {
			var v = 0.0;
			var a = 0.5;
			var shift = vec2(100.0);

			var rot = mat2(cos(0.5), sin(0.5),-sin(0.5), cos(0.50));

			for(i in 0...NUM_OCTAVES){
				v += a * noise(_st);
				_st = _st*rot * 2.0 + shift;
				a *= 0.5;
			}
			return v;

		}

		function noise(_st:Vec2):Float {
			var i = floor(_st);
			var f = fract(_st);

			var a = random(i);
			var b = random(i + vec2(1.0, 0.0));
			var c = random(i + vec2(0.0, 1.0));
			var d = random(i + vec2(1.0, 1.0));

			var u = f*f*(3.0-2.0*f);

			return mix(a, b, u.x) +
					(c - a)* u.y * (1.0 - u.x) +
					(d - b) * u.x * u.y;
		}
		
		function fragment() {
			var st = calculatedUV;
			var color = vec3(0.0);
			var input:Vec4 = texture.get(input.uv);

			var q = vec2(0.);
			q.x = fbm( st);// + 0.00*time);
			q.y = fbm( st);// + vec2(1.0));
			
			var r = vec2(0.);
			r.x = fbm( st + 1.0*q + vec2(1.7,9.2)+ 0.15*time );
			r.y = fbm( st + 1.0*q + vec2(8.3,2.8)+ 0.126*time);

			var f = fbm(st-r);

			color = mix(vec3(0.101961,0.619608,0.666667),
					vec3(0.666667,0.666667,0.498039),
					clamp((f*f)*4.0,0.0,1.0));
	
			color = mix(color,
						vec3(0,0,0.164706),
						clamp(length(q),0.0,1.0));
		
			color = mix(color,
						vec3(0.666667,1,1),
						clamp(length(r.x),0.0,1.0));
			color = vec3((f*f*f+.6*f*f+.5*f)*color);

			
			var threshold:Float = 0.1;
					
			
						// treshold
			var bright:Float = 0.33333 * (color.r + color.g + color.b);
			var b:Float = mix(0.0, 1.0, step(threshold, bright));
			//var co:Vec3(step(threshold,color.r),step(threshold,color.g),step(threshold,color.b));
						//gl_FragColor = vec4(vec3(b), 1.0);
			
			//pixelColor = vec4(co,input.r);
			pixelColor = vec4(color,b*input.r);
			//pixelColor = vec4(color,input.r);

		}
		
	}

	public function new(tex:Texture) {
		super();
		texture = tex;
		NUM_OCTAVES = 5;
	}
	
}

class PerlinNoiseShader extends hxsl.Shader {
	static var SRC = {
		@:import h3d.shader.Base2d;
		@param var texture:Sampler2D;
		@param var speed:Float;
		@param var frequency:Float;
		@param var amplitude:Float;
		@param var NUM_OCTAVES:Int;
		
		function random(_st:Vec2):Float {
			return fract(sin(dot(_st.xy,vec2(12.9898,78.233)))*43758.5453123);
		}

		
		function fbm(_st:Vec2):Float {
			var v = 0.0;
			var a = 0.5;
			var freq = 0.0;

			for(i in 0...NUM_OCTAVES){
				v += a * noise(_st);
				_st = _st* 2.0;
				a *= 0.5;
			}
			return v;

		}

		function noise(_st:Vec2):Float {
			var i = floor(_st);
			var f = fract(_st);

			var a = random(i);
			var b = random(i + vec2(1.0, 0.0));
			var c = random(i + vec2(0.0, 1.0));
			var d = random(i + vec2(1.0, 1.0));

			var u = f*f*(3.0-2.0*f);

			return mix(a, b, u.x) +
					(c - a)* u.y * (1.0 - u.x) +
					(d - b) * u.x * u.y;
		}

		
		function fragment() {
			var st = calculatedUV;
			var color = vec3(0.0);
			var input:Vec4 = texture.get(input.uv);
			var threshold:Float = 0.5;
			//st.x *=
			color += fbm(st*3.0);

			// treshold
			//var bright:Float = 0.33333 * (color.r + color.g + color.b);
			//var b:Float = mix(0.0, 1.0, step(threshold, bright));
			//var co:Vec3(step(threshold,color.r),step(threshold,color.g),step(threshold,color.b));
    		//gl_FragColor = vec4(vec3(b), 1.0);

			//pixelColor = vec4(co,input.r);
			pixelColor = vec4(color,input.r);

		}
		
	}

	public function new(tex:Texture) {
		super();
		texture = tex;
		NUM_OCTAVES = 5;
	}
}

class BitmapShader extends hxsl.Shader {
	static var SRC = {
		@:import h3d.shader.Base2d;
		@param var texture:Sampler2D;

		
		function fragment() {
			var color:Vec4 = texture.get(input.uv);
			pixelColor = vec4(color);
		}
	}
}

class SmokeShader extends hxsl.Shader {
		static var SRC = {
			@:import h3d.shader.Base2d;
			@param var texture:Sampler2D;
			@param var seed:Int;
			@param var ratio:Float;
			@param var speed:Float;
			@param var frequency:Float;
			@param var lifetime:Float;
			@param var decay:Float;
			

			function __init__() {
			//lt = lifetime;
			}

			function fragment() {
				var st = calculatedUV;
				var input:Vec4 = texture.get(input.uv);
				

				var colorA:Vec3 = vec3(0.8,0,0);
				var colorB:Vec3 = vec3(0.6,0,0);
				
				if(seed == 2){
					colorB = vec3(0.8,0.4,0.);
					colorA = vec3(1,0.6,0.);
				}

				if(seed == 3){
					colorA = vec3(0.4,0.,0.);
					colorB = vec3(0.2,0.,0.);
				}

				var eA = vec3(0.,0.,0.);
				var eB = vec3(0.,0.,0.);

				var color = vec3(0,0,0);
				
				colorA = mix(eA,colorA,ratio);
				colorB = mix(eB,colorB,ratio);

				color = mix(color,colorA,input.r);
				color = mix(color,colorB,input.b);

				pixelColor = vec4(color,(input.r+input.b)*ratio);
	
			}
			
		}
	
		public function new(tex:Texture,se:Int,rat:Float) {
			super();
			texture = tex;
			seed = se;
			ratio = rat;
			lifetime = 1.;
			decay = 0.5;
		}
	}
	 */

/* #ifdef GL_ES
precision mediump float;
#endif

uniform vec2 u_resolution;
uniform vec2 u_mouse;
uniform float u_time;

float random (in vec2 st) {
    return fract(sin(dot(st.xy,
                         vec2(12.9898,78.233)))*
        43758.5453123);
}

// Based on Morgan McGuire @morgan3d
// https://www.shadertoy.com/view/4dS3Wd
float noise (in vec2 st) {
    vec2 i = floor(st);
    vec2 f = fract(st);

    // Four corners in 2D of a tile
    float a = random(i);
    float b = random(i + vec2(1.0, 0.0));
    float c = random(i + vec2(0.0, 1.0));
    float d = random(i + vec2(1.0, 1.0));

    vec2 u = f * f * (3.0 - 2.0 * f);

    return mix(a, b, u.x) +
            (c - a)* u.y * (1.0 - u.x) +
            (d - b) * u.x * u.y;
}

#define OCTAVES 6
float fbm (in vec2 st) {
    // Initial values
    float value = 0.0;
    float amplitude = .5;
    float frequency = 0.;
    //
    // Loop of octaves
    for (int i = 0; i < OCTAVES; i++) {
        value += amplitude * noise(st);
        st *= 2.;
        amplitude *= .5;
    }
    return value;
}

void main() {
    vec2 st = gl_FragCoord.xy/u_resolution.xy;
    st.x *= u_resolution.x/u_resolution.y;

    vec3 color = vec3(0.0);
    color += fbm(st*3.0);

    gl_FragColor = vec4(color,1.0);
}
 */